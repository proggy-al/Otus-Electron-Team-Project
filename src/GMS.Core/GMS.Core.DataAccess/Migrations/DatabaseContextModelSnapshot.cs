// <auto-generated />
using System;
using GMS.Core.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GMS.Core.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GMS.Core.Core.Domain.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("FitnessClubId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000001"),
                            Deleted = false,
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Name = "Outdoor workout area"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000002"),
                            Deleted = false,
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Name = "Free weights area"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000003"),
                            Deleted = false,
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Name = "Functional training area"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000004"),
                            Deleted = false,
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Name = "Resistance Machines area"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000005"),
                            Deleted = false,
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Name = "Cardio Equipment area"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000006"),
                            Deleted = false,
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            Name = "Тренажерный зал"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000007"),
                            Deleted = false,
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            Name = "Зона кардиотренажеров"
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FitnessClubId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000001"),
                            Deleted = false,
                            EndDate = new DateTime(2024, 2, 17, 20, 50, 55, 529, DateTimeKind.Utc).AddTicks(8684),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            ManagerId = new Guid("00000000-0000-0000-0006-000000000001"),
                            ProductId = new Guid("b0000000-0000-0000-0000-000000000002"),
                            StartDate = new DateTime(2023, 2, 17, 20, 50, 55, 529, DateTimeKind.Utc).AddTicks(8681),
                            UserId = new Guid("00000000-0000-0000-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000002"),
                            Deleted = false,
                            EndDate = new DateTime(2023, 3, 19, 20, 50, 55, 529, DateTimeKind.Utc).AddTicks(8698),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            ManagerId = new Guid("00000000-0000-0000-0006-000000000001"),
                            ProductId = new Guid("b0000000-0000-0000-0000-000000000003"),
                            StartDate = new DateTime(2023, 2, 17, 20, 50, 55, 529, DateTimeKind.Utc).AddTicks(8698),
                            UserId = new Guid("00000000-0000-0000-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000003"),
                            Deleted = false,
                            EndDate = new DateTime(2023, 3, 19, 20, 50, 55, 529, DateTimeKind.Utc).AddTicks(8735),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            ManagerId = new Guid("00000000-0000-0000-0006-000000000002"),
                            ProductId = new Guid("b0000000-0000-0000-0000-000000000006"),
                            StartDate = new DateTime(2023, 2, 17, 20, 50, 55, 529, DateTimeKind.Utc).AddTicks(8734),
                            UserId = new Guid("00000000-0000-0000-0001-000000000002")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000004"),
                            Deleted = false,
                            EndDate = new DateTime(2023, 3, 19, 20, 50, 55, 529, DateTimeKind.Utc).AddTicks(8743),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            ManagerId = new Guid("00000000-0000-0000-0006-000000000002"),
                            ProductId = new Guid("b0000000-0000-0000-0000-000000000008"),
                            StartDate = new DateTime(2023, 2, 17, 20, 50, 55, 529, DateTimeKind.Utc).AddTicks(8742),
                            UserId = new Guid("00000000-0000-0000-0001-000000000002")
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.FitnessClub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("FitnessClubs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Address = "360 Hampton Dr, Venice, CA 90291, USA",
                            Deleted = false,
                            Description = "Gold’s Gym Venice gives you access to everything you need reach your fitness goals: all outdoor workout spaces, weight and strength training areas, a wide selection of free weights, cardio equipment, resistance machines – plus a team of certified Personal Trainers ready to support and motivate you to become the strongest version of yourself. From our beginning as a small bodybuilding gym in 1965 to today, Gold’s Gym delivers a dynamic fitness experience focused on strength and performance. View our local gym membership options and join Gold’s Gym Venice now.",
                            Name = "Gold's Gym Venice",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000002"),
                            Address = "Россия, Санкт-Петербург, ул. Воскова, д. 16",
                            Deleted = false,
                            Description = "Атлетический клуб «Алмаз» является одним из самых известных клубов Санкт-Петербурга и России, развивающих фитнес и бодибилдинг. За более чем 25 летнею историю развития, клуб накопил богатейший опыт в сфере фитнеса и бодибилдинга. Об этом свидетельствуют многочисленные победы воспитанников клуба на международных, Российских и городских соревнованиях по фитнесу и бодибилдингу.Клуб оборудован удобными раздевалками, душевыми, современными системами вентиляции зала.Тренера клуба помогут клиентам составить индивидуальные программы тренировок, скорректируют диету, помогут распланировать распорядок дня, для желающих проведут персональные тренировки.",
                            Name = "Атлетический клуб Алмаз",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FitnessClubId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000001"),
                            Deleted = false,
                            Description = "Free access to the club for 30 days",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Name = "1-Month Contract",
                            Price = 100,
                            Quantity = 30
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000002"),
                            Deleted = false,
                            Description = "Free access to the club for 1 year",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Name = "12-Month Contract",
                            Price = 490,
                            Quantity = 365
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000003"),
                            Deleted = false,
                            Description = "for a month",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Name = "1 personal Training",
                            Price = 65,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000004"),
                            Deleted = false,
                            Description = "for a month",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Name = "8 personal Training",
                            Price = 360,
                            Quantity = 8
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000005"),
                            Deleted = false,
                            Description = "Свободное посещение клуба в течении 1 дня",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            Name = "Разовое посещение",
                            Price = 500,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000006"),
                            Deleted = false,
                            Description = "Свободное посещение клуба в течении 30 дней",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            Name = "Абонемент на месяц",
                            Price = 2000,
                            Quantity = 30
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000007"),
                            Deleted = false,
                            Description = "на 1 месяц",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            Name = "1 персональная тренировка",
                            Price = 2000,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000008"),
                            Deleted = false,
                            Description = "на 1 месяц",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            Name = "8 персональных тренировок",
                            Price = 12000,
                            Quantity = 8
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AreaId")
                        .IsUnique();

                    b.HasIndex("FitnessClubId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("TimeSlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TimeSlotId")
                        .IsUnique();

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Area", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.FitnessClub", "FitnessClub")
                        .WithMany("Areas")
                        .HasForeignKey("FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessClub");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Contract", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.FitnessClub", "FitnessClub")
                        .WithMany("Contracts")
                        .HasForeignKey("FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GMS.Core.Core.Domain.Product", "Product")
                        .WithOne("Contract")
                        .HasForeignKey("GMS.Core.Core.Domain.Contract", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessClub");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Product", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.FitnessClub", "FitnessClub")
                        .WithMany("Products")
                        .HasForeignKey("FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessClub");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.TimeSlot", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.Area", "Area")
                        .WithOne("TimeSlot")
                        .HasForeignKey("GMS.Core.Core.Domain.TimeSlot", "AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GMS.Core.Core.Domain.FitnessClub", "FitnessClub")
                        .WithMany("TimeSlots")
                        .HasForeignKey("FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("FitnessClub");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Training", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.TimeSlot", "TimeSlot")
                        .WithOne("Training")
                        .HasForeignKey("GMS.Core.Core.Domain.Training", "TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Area", b =>
                {
                    b.Navigation("TimeSlot")
                        .IsRequired();
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.FitnessClub", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Contracts");

                    b.Navigation("Products");

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Product", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.TimeSlot", b =>
                {
                    b.Navigation("Training")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
