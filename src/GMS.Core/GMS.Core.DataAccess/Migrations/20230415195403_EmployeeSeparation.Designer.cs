// <auto-generated />
using System;
using GMS.Core.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GMS.Core.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230415195403_EmployeeSeparation")]
    partial class EmployeeSeparation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GMS.Core.Core.Domain.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("FitnessClubId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000001"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false,
                            Name = "Outdoor workout area"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000002"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false,
                            Name = "Free weights area"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000003"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false,
                            Name = "Functional training area"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000004"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false,
                            Name = "Resistance Machines area"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000005"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false,
                            Name = "Cardio Equipment area"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000006"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            IsDeleted = false,
                            Name = "Тренажерный зал"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000007"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            IsDeleted = false,
                            Name = "Зона кардиотренажеров"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000008"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Зона 8 ФК3"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000009"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Зона 9 ФК3"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-00000000000a"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Зона 10 ФК3"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-00000000000b"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = true,
                            Name = "Зона 11 ФК3"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-00000000000c"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Зона 12 ФК3"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-00000000000d"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Зона 13 ФК3"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-00000000000e"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Зона 14 ФК3"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-00000000000f"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Зона 15 ФК3"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000010"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Зона 16 ФК3"
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ManagerId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000001"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9509),
                            IsApproved = true,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000001"),
                            ProductId = new Guid("b0000000-0000-0000-0000-000000000002"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9506),
                            UserId = new Guid("00000000-0000-0000-0002-000000000001")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000002"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9535),
                            IsApproved = true,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000001"),
                            ProductId = new Guid("b0000000-0000-0000-0000-000000000003"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9535),
                            UserId = new Guid("00000000-0000-0000-0002-000000000001")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000003"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9547),
                            IsApproved = true,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000002"),
                            ProductId = new Guid("b0000000-0000-0000-0000-000000000006"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9546),
                            UserId = new Guid("00000000-0000-0000-0002-000000000002")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000004"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9556),
                            IsApproved = true,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000002"),
                            ProductId = new Guid("b0000000-0000-0000-0000-000000000008"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9555),
                            UserId = new Guid("00000000-0000-0000-0002-000000000002")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000005"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9566),
                            IsApproved = false,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000003"),
                            ProductId = new Guid("b0000000-0000-0000-0000-000000000009"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9565),
                            UserId = new Guid("00000000-0000-0000-0002-000000000003")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000006"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9578),
                            IsApproved = false,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000003"),
                            ProductId = new Guid("b0000000-0000-0000-0000-00000000000a"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9577),
                            UserId = new Guid("00000000-0000-0000-0002-000000000003")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000007"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9586),
                            IsApproved = false,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000003"),
                            ProductId = new Guid("b0000000-0000-0000-0000-00000000000b"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9586),
                            UserId = new Guid("00000000-0000-0000-0002-000000000003")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000008"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9594),
                            IsApproved = true,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000003"),
                            ProductId = new Guid("b0000000-0000-0000-0000-00000000000c"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9593),
                            UserId = new Guid("00000000-0000-0000-0002-000000000003")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-000000000009"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9602),
                            IsApproved = true,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000003"),
                            ProductId = new Guid("b0000000-0000-0000-0000-00000000000d"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9601),
                            UserId = new Guid("00000000-0000-0000-0002-000000000003")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-00000000000a"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9612),
                            IsApproved = true,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000003"),
                            ProductId = new Guid("b0000000-0000-0000-0000-00000000000e"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9612),
                            UserId = new Guid("00000000-0000-0000-0002-000000000003")
                        },
                        new
                        {
                            Id = new Guid("c0000000-0000-0000-0000-00000000000b"),
                            EndDate = new DateTime(2024, 4, 14, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9619),
                            IsApproved = true,
                            IsDeleted = false,
                            ManagerId = new Guid("10000000-0000-0000-0006-000000000003"),
                            ProductId = new Guid("b0000000-0000-0000-0000-00000000000f"),
                            StartDate = new DateTime(2023, 4, 15, 19, 54, 2, 895, DateTimeKind.Utc).AddTicks(9618),
                            UserId = new Guid("00000000-0000-0000-0002-000000000002")
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("FitnessClubId");

                    b.ToTable("Employees");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.FitnessClub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("character varying(4096)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("FitnessClubs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000001"),
                            Address = "360 Hampton Dr, Venice, CA 90291, USA",
                            Description = "The Original Home of Serious Training",
                            IsDeleted = false,
                            Name = "Gold's Gym Venice",
                            OwnerId = new Guid("00000000-0000-0000-0004-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000002"),
                            Address = "Россия, Санкт-Петербург, ул. Воскова, д. 16",
                            Description = "Персональные тренировки по фитнесу и бодибилдингу",
                            IsDeleted = false,
                            Name = "Атлетический клуб Алмаз",
                            OwnerId = new Guid("00000000-0000-0000-0004-000000000002")
                        },
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000003"),
                            Address = "Адрес ФК 3",
                            Description = "Персональные тренировки ФК 3",
                            IsDeleted = false,
                            Name = "Фитнес клуб 3",
                            OwnerId = new Guid("00000000-0000-0000-0004-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000004"),
                            Address = "Адрес ФК 4",
                            Description = "Персональные тренировки ФК 4",
                            IsDeleted = false,
                            Name = "Фитнес клуб 4",
                            OwnerId = new Guid("00000000-0000-0000-0004-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000005"),
                            Address = "Адрес ФК 5",
                            Description = "Персональные тренировки ФК 5",
                            IsDeleted = false,
                            Name = "Фитнес клуб 5",
                            OwnerId = new Guid("00000000-0000-0000-0004-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000006"),
                            Address = "Адрес ФК 6",
                            Description = "Персональные тренировки ФК 6",
                            IsDeleted = false,
                            Name = "Фитнес клуб 6",
                            OwnerId = new Guid("00000000-0000-0000-0004-000000000003")
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FitnessClubId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000001"),
                            Description = "Cardio training",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false,
                            Name = "1 personal Training",
                            Price = 100,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000002"),
                            Description = "Cardio training",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false,
                            Name = "8 personal Training",
                            Price = 600,
                            Quantity = 8
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000003"),
                            Description = "Functional training",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false,
                            Name = "1 personal Training",
                            Price = 100,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000004"),
                            Description = "Functional training",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false,
                            Name = "8 personal Training",
                            Price = 600,
                            Quantity = 8
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000005"),
                            Description = "Бодибилдинг",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            IsDeleted = false,
                            Name = "1 персональная тренировка",
                            Price = 80,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000006"),
                            Description = "Бодибилдинг",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            IsDeleted = false,
                            Name = "8 персональных тренировок",
                            Price = 480,
                            Quantity = 8
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000007"),
                            Description = "Кардио",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            IsDeleted = false,
                            Name = "1 персональная тренировка",
                            Price = 80,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000008"),
                            Description = "Кардио",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            IsDeleted = false,
                            Name = "8 персональных тренировок",
                            Price = 480,
                            Quantity = 8
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000009"),
                            Description = "1 персональня тренировка ФК3",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Продукт 9 ФК3",
                            Price = 10,
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-00000000000a"),
                            Description = "2 персональные тренировки ФК3",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Продукт 10 ФК3",
                            Price = 20,
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-00000000000b"),
                            Description = "3 персональные тренировки ФК3",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Продукт 11 ФК3",
                            Price = 30,
                            Quantity = 3
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-00000000000c"),
                            Description = "4 персональные тренировки ФК3",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Продукт 12 ФК3",
                            Price = 40,
                            Quantity = 4
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-00000000000d"),
                            Description = "5 персональных тренировок ФК3",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Продукт 13 ФК3",
                            Price = 50,
                            Quantity = 5
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-00000000000e"),
                            Description = "6 персональных тренировок ФК3",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Продукт 14 ФК3",
                            Price = 60,
                            Quantity = 6
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-00000000000f"),
                            Description = "7 персональных тренировок ФК3",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Продукт 15 ФК3",
                            Price = 70,
                            Quantity = 7
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000010"),
                            Description = "8 персональных тренировок ФК3",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Продукт 16 ФК3",
                            Price = 80,
                            Quantity = 8
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000011"),
                            Description = "9 персональных тренировок ФК3",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Продукт 17 ФК3",
                            Price = 90,
                            Quantity = 9
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000012"),
                            Description = "10 персональных тренировок ФК3",
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false,
                            Name = "Продукт 18 ФК3",
                            Price = 100,
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBusy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("TimeSlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TimeSlotId")
                        .IsUnique();

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Employees.Administrator", b =>
                {
                    b.HasBaseType("GMS.Core.Core.Domain.Employee");

                    b.ToTable("Administrators", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0001-000000000001"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0001-000000000002"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0001-000000000003"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Employees.Manager", b =>
                {
                    b.HasBaseType("GMS.Core.Core.Domain.Employee");

                    b.ToTable("Managers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0006-000000000001"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0006-000000000002"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0006-000000000003"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Employees.Trainer", b =>
                {
                    b.HasBaseType("GMS.Core.Core.Domain.Employee");

                    b.ToTable("Trainers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0005-000000000001"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000001"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0005-000000000002"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000002"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0005-000000000003"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0005-000000000004"),
                            FitnessClubId = new Guid("f0000000-0000-0000-0000-000000000003"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Area", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.FitnessClub", "FitnessClub")
                        .WithMany("Areas")
                        .HasForeignKey("FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessClub");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Contract", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.Employees.Manager", "Manager")
                        .WithMany("Contracts")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GMS.Core.Core.Domain.Product", "Product")
                        .WithMany("Contracts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Employee", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.FitnessClub", "FitnessClub")
                        .WithMany("Employees")
                        .HasForeignKey("FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessClub");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Product", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.FitnessClub", "FitnessClub")
                        .WithMany("Products")
                        .HasForeignKey("FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessClub");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.TimeSlot", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.Area", "Area")
                        .WithMany("TimeSlots")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GMS.Core.Core.Domain.Employees.Trainer", "Trainer")
                        .WithMany("TimeSlots")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Training", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.TimeSlot", "TimeSlot")
                        .WithOne("Training")
                        .HasForeignKey("GMS.Core.Core.Domain.Training", "TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Employees.Administrator", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.Employee", null)
                        .WithOne()
                        .HasForeignKey("GMS.Core.Core.Domain.Employees.Administrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Employees.Manager", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.Employee", null)
                        .WithOne()
                        .HasForeignKey("GMS.Core.Core.Domain.Employees.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Employees.Trainer", b =>
                {
                    b.HasOne("GMS.Core.Core.Domain.Employee", null)
                        .WithOne()
                        .HasForeignKey("GMS.Core.Core.Domain.Employees.Trainer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Area", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.FitnessClub", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Employees");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Product", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.TimeSlot", b =>
                {
                    b.Navigation("Training")
                        .IsRequired();
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Employees.Manager", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("GMS.Core.Core.Domain.Employees.Trainer", b =>
                {
                    b.Navigation("TimeSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
